---
layout: post
title: 应用性能优化经验分享
date: 2016-08-14
tag: JVM
---

* TOC
{:toc}

> 在开发应用程序的整个过程中，性能问题是一个老生常谈的问题，我有幸接触过性能调优的整个过程，在此我分享一下关于这方面的一些经验。

> 性能调优是无止境的，我们不能为了调优而调优，首先，我们应该对应用的以下方面做一下了解：

>- 明确性能的具体要求，要根据真实的生产环境确定应用的各个性能指标。
>- 了解当前应用程序的性能，知道当前应用程序的性能与理想性能指标之间的差距，通常的指标是单位时间内的处理数和响应时间
>- 性能测试环境的硬件条件以及数据量的分布

> 当了解以上情况后，确定性能调优的必要性，然后按照以下调优步骤来进行：

> 1.找到程序的性能瓶颈点

>- 当讨论应用程序的性能问题时，大多数的程序员都会考虑程序的代码，这当然是对的，但更重要的是要找到影响程序性能的瓶颈代码，也就是我们常说的80/20原则，即80%的性能问题出在20%的代码上。

> 2.采取适当的措施来提高性能

>- 提升性能的措施有很多，例如：业务逻辑的优化梳理，程序代码的优化，硬件条件的提升。并不是说所有的性能问题一定是代码引起的，我接触的调优案例中，有很多都是程序实现逻辑过于臃肿导致，这个时候就需要重新梳理流程的设计才能根本的解决问题。所以需要分析各种措施的可行性，选择最合适的方案。

> 3.修改并且只修改某一方面来提高性能

>- 一次只改变可能引起性能降低的某一方面，然后观察程序的性能是否有所提高，而不应该一次改变多个方面，因为这样你将不知道到底哪个方面的改变提高了程序的性能，哪个方面没有，即不能知道程序瓶颈在哪。

> 4.在相同的测试环境，用相同的测试案例来验证性能调优的结果

> 5.循环整个过程，一直到达到性能指标为止
 
上面说了下性能调优大体的步骤，由于性能问题是五花八门的，我们无法给出一个万能的策略模板，只能根据具体问题具体分析。下面我列举一下平时应该注意的会影响性能的一下点来供大家参考。

>- 1、避免对象创建和GC。只要有可能，应该避免创建对象，防止调用构造函数带来的相关性能成本，以及在对象结束其生命周期时进行垃圾收集所带来的成本
>- 2、尽可能使用基本变量类型。尽可能使用基本变量类型，而不使用对象类型。例如，使用int，而不使用Integer。 
>- 3、尽可能缓存使用频繁数据。缓存那些频繁使用的寿命短的对象，避免一遍又一遍地重复创建相同的对象，并因此加重垃圾收集的负担。对于这种情况，为了提高对象的复用程度，可以把对象定义成final static类型。
>- 4、使用StringBuffer 由于String属于不可变对象，每次字符串操作都会生成新的字符串对象实例，而这些对象必须经过GC
>- 5、使用数据库连接池。由于创建数据库连接比较耗费资源和时间，所以基于中间件的应用系统，在进行数据库操作时，尽可能使用应用服务器的数据库连接池实现. 
>- 6、使用线程池（thread pooling）。由于创建线程比较耗费资源和时间，所在大量或并发使用线程的时候，请使用线程池。 
>- 7、避免在循环内做过多的冗余操作，例如，公共定义尽量放在循环外 
>- 8、Java Native Interface（JNI）。使用本机代码编写应用程序的一部分，特别是频繁使用的部分，并将之与Java连接，这样做通常是为了提高性能。不过，JVM与本机代码之间的通信通常很慢，因此，太多的JNI调用可能会降低性能。 
>- 9、避免使用更复杂的数据结构。例如，在可以使用数组的地方不要使用向量（Vector）。使用最有效的方法搜索元素，并将元素插入数据结构中，比如说，在向量的结尾处添加和删除元素，以便获得更好的性能。  
>- 10、避免非常大的内存分配。有时候问题不是由当时的堆状态造成的，而是因为分配失败造成的。分配的内存块都必须是连续的，而随着堆越来越满，找到较大的连续块越来越困难。这不仅仅是Java的问题，使用C中的malloc也会遇到这个问题。JVM在压缩阶段通过重新分配引用来减少碎片，但其代价是要冻结应用程序较长的时间，导致CPU繁忙。 
>- 11、 异常的开销很大。当创建一个异常时，需要收集一个栈跟踪（stack track），这个栈跟踪用于描述异常时在何处创建的，构建这些栈跟踪时需要为运行时栈做一个快照，正是这一部分开销很大。所以建议在Java实践中，可以使用try…catch…捕获异常，进行异常处理，然后在抛出异常，而不是重新创建异常。 
>- 12、 尽量避免 “casts”和“instanceof” 。因为在 Java 中销毁操作不是在编译时而是在运行时执行的。 
>- 13、 使用 I/O时，尽量用缓冲机制   
>- 14、 避免远程方法调用。由于远程方法调用，需要在客户端建立代理，在服务器端创建交服服务，对网络和系统开销都比较大，所以建议在系统中不进行远程方法调用操作。
>- 15、要尽量避免与外围系统的交互次数，尽量避免频繁的操作数据库
>- 16、在开发中要尽量避免使用反射或采用反射机制的第三方包，如beanutils 等，对对象进行取值赋值
>- 17、序列化bean 的操作对性能影响较大，要尽量少的使用
>- 18、对于从数据库中读取预期数据超过1000条的情况，必须进行分页读取，分页操作
>- 19、对于大文件（大文件主要指行数超过1000行，或这个大小超过10k的文件，通过这类文件的操作不当极易引起内存溢出或效率低下的问题），不允许使用一次性读入或者写入全部数据，绝不允许频繁的关闭，打开操作
>- 20、操作数据库尽量使用批量操作方式
>- 21、并发控制代码要防止过多的同步，同步时锁的粒度要做到尽量小
>- 22、日志管理框架对性能的影响很大，appender是原子性的，所以尽量根据交易不同区分不同的appender，尽量关闭无实际意义的jar包中的日志输出，debug级别比info级别要慢至少10倍以上，尽量不要配置输出类路径名称，它才是耗时大户

