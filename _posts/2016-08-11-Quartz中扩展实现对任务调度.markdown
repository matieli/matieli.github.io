---
layout: post
title: Quartz中扩展MethodInvokingJobDetailFactoryBean实现对任务调度
date: 2016-08-11 15:32:24.000000000 +09:00
tag: Quartz
---



&emsp;&emsp;若有多个任务需要调度，则配置多个JobDetail、Trigger即可，待执行的Task bean没有啥任何要求，不需要extends任何class、或者implements任何interface，只是被执行的method需要是无参数的；

> 但是在我们现实项目中，仅仅完成这样的功能是还不够的，我们还需要争取完成以下几点：

>- 对所有的Task实现执行开始、结束时间的记录；
>- 对每天的Task执行结果持久化、或者通过email、旺旺消息等方式告知相关owner；
>- 当我们有多台Task服务器时，如何保证每个任务只在一台服务器上执行;

&emsp;&emsp;针对以上几个问题，我们也都有很简单、直接的办法可以搞定，比如说1、2两点可以直接在每个任务中各自编码完成，但是这样不仅每个task都要写非常类似的重复代码、而且不能保证每个任务的执行情况都被记录，因为某些task的编码人员就不会在意这些非功能性需求；对于第3点，我们也可以通过配置来完成向不同task服务器部署不一样的发布包来完成，但这给发布带来了麻烦，这意味着有多少台task服务器，就需要通过修改配置重新打包并发布多少次；




&emsp;&emsp;其实我们可以利用Spring默认提供的AOP来非常优雅的解决这几个问题：扩展MethodInvokingJobDetailFactoryBean来实现对任务调度时的拦截！其关键代码为MethodInvokingJobDetailFactoryBean.MethodInvokingJob.executeInternal(JobExecutionContext context);这个method中；

```java
package com.lemon.core.quartz;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.annotation.Resource;
import javax.sql.DataSource;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.impl.JobDetailImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean;
import org.springframework.util.MethodInvoker;

public class JobDetailFactoryBean2 extends MethodInvokingJobDetailFactoryBean{
    private static final Logger logger = LoggerFactory.getLogger(JobDetailFactoryBean.class);
            
    private DataSource jobQuartzDataSource;
    
    private String quartzSQL;
    
    @Resource
    public void setJobQuartzDataSource(DataSource jobQuartzDataSource) {
        this.jobQuartzDataSource = jobQuartzDataSource;
    }

    @Resource
    public void setQuartzSQL(String quartzSQL) {
        this.quartzSQL = quartzSQL;
    }
    
    @Override
    protected void postProcessJobDetail(JobDetail jobDetail) {
        JobDataMap jobDataMap = jobDetail.getJobDataMap();
        jobDataMap.put("jobQuartzDataSource", jobQuartzDataSource);
        jobDataMap.put("quartzSQL", quartzSQL);
    }
    
    @Override
    public void afterPropertiesSet() throws ClassNotFoundException,NoSuchMethodException {
        super.afterPropertiesSet();

        String clazzName = ((JobDetail) super.getObject()).getJobClass().getName();
        logger.info("origin jobClass : " + clazzName);
                
        // Consider the concurrent flag to choose between stateful and stateless job.
        String invokeName = MethodInvokingJob.class.getName();
        logger.info("MethodInvokingJob.name : " + invokeName);
        if(invokeName.equals(clazzName)) {
            logger.info("jobClass : " + clazzName);
            ((JobDetailImpl)super.getObject()).setJobClass(AppsMethodInvokingJob.class);
        } else {
            ((JobDetailImpl)super.getObject()).setJobClass(AppsStatefulMethodInvokingJob.class);
        }
        logger.info("new jobClass : " + clazzName);
        
        if(this.jobQuartzDataSource == null || 
                this.quartzSQL == null || "".equals(this.quartzSQL)){
            logger.info("jobQuartzDataSource = " + this.jobQuartzDataSource);    
            logger.info("dataSource or init select sql not found ! Pls check your config !");    
            throw new RuntimeException("dataSource or init select sql not found ! Pls check your config !");
        }
        logger.info("init success !");
    }
    
    public static class AppsMethodInvokingJob extends MethodInvokingJob{
        protected static final Logger logger = LoggerFactory.getLogger(AppsMethodInvokingJob.class);
        private MethodInvoker methodInvoker;
        private String errorMessage;
        
        /**
         * Set the MethodInvoker to use.
         */
        public void setMethodInvoker(MethodInvoker methodInvoker) {
            this.methodInvoker = methodInvoker;
        }

        private List<String> getIPs() throws SocketException {
            List<String> ips = new ArrayList<String>();
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
                NetworkInterface intf = en.nextElement();
                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {
                    InetAddress inetAddress = enumIpAddr.nextElement();

                    if (!inetAddress.isLoopbackAddress() && !inetAddress.isLinkLocalAddress() && inetAddress.isSiteLocalAddress()) {
                        String ip = inetAddress.getHostAddress().toString();
                        if(ip != null && !ip.startsWith("127.0")){
                            ips.add(ip);
                            logger.info("a ip addr -> " + ip);
                        }
                    }
                }
            }
            
            return ips;
        }

        /**
         * Invoke the method via the MethodInvoker.
         */
        protected void executeInternal(JobExecutionContext context) throws JobExecutionException {        
            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            try {            
                
                JobDataMap jobDataMap = context.getJobDetail().getJobDataMap();
                DataSource jobQuartzDataSource = (DataSource)jobDataMap.get("jobQuartzDataSource");
                String quartzSQL = (String)jobDataMap.get("quartzSQL");
                logger.info(quartzSQL);    
                List<String> ips = this.getIPs();

                //根据当前服务器主机名或者IP判断是否需要执行该任务                
                conn = jobQuartzDataSource.getConnection();
                //根据IP地址查数据库                
                pstmt = conn.prepareStatement(quartzSQL);
                
                rs = pstmt.executeQuery();   
                boolean flag = false;
                while(rs.next()){
                    String ip = rs.getString("instid").trim();
                    if(ips.contains(ip)){
                        flag = true;
                        break;
                    }
                }
                
                if(flag) {//数据库里的IP地址匹配
                    logger.info("IP right , running the quartz task!");    
                    
                    //调用具体task执行method代码
                    this.methodInvoker.invoke();                    
                }else {//数据库里没有和IP地址匹配的数据
                    logger.info("IP not right , cannot running the quartz task!");                        
                }                
            } catch (Exception ex) {
                logger.error(" accounted a error : " + this.errorMessage, ex);
                throw new JobExecutionException(this.errorMessage, ex, false);
            } finally{
                try{
                    if(rs != null)
                        rs.close();
                    if(pstmt != null)
                        pstmt.close();
                    if(conn != null)
                        conn.close();
                }catch(Exception e){}
            }
        }
    }
    
    public static class AppsStatefulMethodInvokingJob extends AppsMethodInvokingJob {
    }
}
```